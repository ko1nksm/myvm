#!/bin/sh

set -eu

# The following environment variables can be overridden by ~/.config/myvm or ~/.myvm
DISK_DIR="/var/isos"
ROOT_PASS="pass1234"
USER_NAME="user" USER_FULL_NAME="User" USER_PASS="pass1234"
DEFAULT_TIMEOUT=60

version() { echo "0.0.1"; }
usage() {
  cat <<HERE
Usage: myvm <command> <shrc-file> [<args>]...

commands:
  run <shrc-file> [<tasks> | --step-on]...
  sendkey <shrc-file> [<keys>]...
  ocr <shrc-file>
  vnc <shrc-file> [enable | disable | display]
  demolish <shrc-file>
HERE
}

abort() {
  [ $# -gt 0 ] && echo "$1" >&2
  exit 1
}

if (export PATH=/dev/null; shopt -s expand_aliases 2>/dev/null); then
  shopt -s expand_aliases
fi

. ./lib/vm.sh
for i in build stop restart setmem vnc attach_disk detach_disk; do
  eval "alias vm.$i='vm_$i \"\$DOMAIN\"'"
done

exalias() {
  if (eval "function '$1'() { :; }") >/dev/null 2>&1; then
    eval "function '$1'() { $2 \"\$@\"; }"
  elif (alias "$1=:") 2>/dev/null; then
    alias "$1=$2"
  else
    alias -- "$1=$2"
  fi
}

step_mode=false
step_on() {
  step_mode=true
}

sendkey() {
  [ $# -eq 0 ] && return 0
  if $step_mode; then
    while true; do
      printf '%s' "Send keys '$*'? [Y/s/a/o or ? for help]: "
      read -r REPLY
      case ${REPLY:-y} in
        [yY]*) break ;;
        [sS]*) return 0 ;;
        [aA]*) step_mode=false && break ;;
        [oO]*) ocr ;;
        '?'*) echo "Help: [Y]es / [S]kip / Yes to [A]ll / [O]CR" ;;
      esac
    done
  else
    echo "Send keys '$*'"
  fi

  vm_sendkey "$DOMAIN" "$@"
}

prompt() {
  waitfor "$1"
  shift
  sendkey "$@"
}

next_timeout=''
timeout() {
  set -- "$1" "${2:-"Time-consuming"}"
  next_timeout="$1"
  echo "$2 process in progress (extend the next timeout to $1 seconds)"
}

waitfor() {
  set -- "$1" "${next_timeout:-$DEFAULT_TIMEOUT}"
  next_timeout=''

  set -- "$1" "$2" 10
  [ "$2" -le 300 ] && set -- "$1" "$2" 5
  [ "$2" -le 60 ] && set -- "$1" "$2" 3

  printf '%s' "Waiting for '$1' "
  start=$(date +%s) && end=$start
  while [ "$end" -le $((start + $2)) ]; do
    printf '.'
    ocr | _match "$1" && echo " [Found]" && return 0
    sleep "$3"
    end=$(date +%s)
  done
  echo " [Timeout]"
  return 1
}

begin_shell() {
  sendkey 'sh -e << "MYVM_SHELL_HEREDOC"' {ENTER}
}

exalias - list_item
list_item() {
  IFS=" $IFS" && set -- "$*" && IFS="${IFS#?}"
  case $1 in
    '{'*'}') set -- '{' "${1#?}" ;;
  esac
  sendkey "$@" '{ENTER}'
}

end_shell() {
  sendkey 'MYVM_SHELL_HEREDOC' {ENTER}
}

spelling_correction() {
  cat
}

_match() {
  (
    set -f
    IFS="*"
    set -- "$(tr -s '\n' ' ')" $(printf '%s' "$1" | tr -s '\n' ' ')
    i=1 pattern=''
    while [ "$i" -lt $# ] && i=$((i + 1)); do
      pattern="${pattern}${pattern:+"*"}\"\$$i\""
    done
    eval "case \$1 in (*$pattern*) exit 0; esac"
    exit 1
  )
}

exec_ocr() {
  gm convert - -colorspace Gray -resize 200% - | tesseract --psm 6 - -
}

ocr() {
  vm_screenshot "$DOMAIN" | exec_ocr | {
    LANG=C tr -cs '[:print:]\n' ' ' | grep .
  } | spelling_correction
}

cmd_run() {
  for i in "$@"; do
    case $i in
      --step-on) continue ;;
      *[!0-9a-zA-Z_]*) abort "Invalid task name '$i'" ;;
    esac
    eval "do_$i() { abort \"Task '$i' not defined\"; }"
  done

  . "$SHRC"

  for i in "$@"; do
    [ "$i" = '--step-on' ] && step_on && continue
    "do_${i}"
  done
}

cmd_sendkey() {
  sendkey "$@"
}

cmd_ocr() {
  . "$SHRC"
  ocr
}

cmd_vnc() {
  vm_vnc "$DOMAIN" "$@"
}

cmd_demolish() {
  while true; do
    printf "Enter a domain name to delete a virtual machine: "
    read -r REPLY
    [ "$REPLY" = "" ] && echo "Nothing done." && return 1
    [ "$REPLY" = "$DOMAIN" ] || continue
    vm_demolish "$DOMAIN"
    break
  done
}

case ${1:-} in
  run | sendkey | ocr | vnc | demolish) SUBCOMMAND=$1 ;;
  -h | --help | help) usage && exit 0 ;;
  -V | --version | version) version && exit 0 ;;
  *) echo "Invalid subcommand." && usage && abort ;;
esac
shift

case ${1:-} in
  *.shrc) [ ! -e "$1" ] && abort "The specified shrc file does not exist." ;;
  '') abort "Please specify the shrc file." ;;
  *) abort "The file extension must be .shrc." ;;
esac

SHRC=$1
DOMAIN="${1%/*}${1#*/}" && DOMAIN=${DOMAIN%.shrc}
HOSTNAME="vm-$(echo "$DOMAIN" | tr . -)"
shift

echo "myvm (Domain: $DOMAIN, Hostname: $HOSTNAME)"

CONFIG=
[ -f "$HOME/.myvm" ] && CONFIG="$HOME/.myvm"
[ -f "$HOME/.config/myvm" ] && CONFIG="$HOME/.config/myvm"

if [ "$CONFIG" ]; then
  echo "Configuration file loaded from $CONFIG."
  . "$CONFIG"
fi
echo

# The following braces make it safe to modify the script during execution
{
  [ "$SUBCOMMAND" = "run" ] && trap 'abort Aborted.' EXIT
  "cmd_${SUBCOMMAND}" "$@"
  trap - EXIT
  exit 0
}
